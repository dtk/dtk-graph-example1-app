---
apiVersion: v1
kind: Service
metadata:
  name: node-app-svc
  labels:
    app: node
spec:
  type: NodePort
  ports:
  - port: 8080
    # Issue 1: This will cause that service target 8081 doesn't match pod/containers actual port 8080
    targetPort: 8081 
    nodePort: 31112
  selector:
    app: node
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-app-dep
  labels:
    app: node
spec:
  selector:
    matchLabels:
      app: node
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: 1
  template:
    metadata:
      labels:
        # Issue 2: This will cause that Service selector cannot match underlying pod
        # Issue 3: This will cause that Deployment selector cannot match underlying pod
        app: node-broken 
    spec:
      containers:
      - name: node
        image: getdtk/graph-example1-app
        env:
        - name: NODE_ENV
          value: production
        - name: PORT
          value: '8080'
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: node-app-secret
              key: db_password
        - name: DB_HOST
          value: <DB_HOST>
        - name: DB_PORT
          # Issue 4: Incorrect REDIS master port. Pod will be started correctly but issue will be seen only in pod logs
          value: '6000'
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "100Mi"
            cpu: "100m"
          # Issue 5: Resource limits are not defined which can potentially be dangerous
